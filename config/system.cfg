#----------------------------
# System Configuration File
#---------------------------
#

default:
{
	robot_encoder:
	{
		realMessageTopic = "/odom";
		simulateMessageTopic = "/odom";
	}
	robot_vel_ctrl:
	{
		aMessageTopic = "/robot/velocity_ctrl";
		aMessageTopic_simu = "/cmd_vel";
		stopSpeed = 0.5;
		turnSpeed = 0.08;
		mintTurnAng = 16;
		stopDist = 1.5;
		stopFrame = 10;
	}
	robot_planned_path:
	{
		aMessageTopic = "/robot/plannedPath";
	}
	robot_set_goal:
	{
		aMessageTopic = "/robot/setnewgoal";
	}
	hokuyolidar:
	{
		aMessageTopic = "/scan";
		maxAngular = 90;# degree
		minAngular = -90;
		angulResol = 0.25; # degree
		validAngular = [-90.0, 90.0];
		minRange = 0.5; #in m
		maxRange = 40.0;
	}
	lidarMapping:
	{
		aMessageTopic = "/robot/mappingInfor";
	}
	uwb_localization:
	{
		aMessageTopic = "/robot/uwb_localization";
		aMessageTopic_2 = "/robot/uwb_localization_2";
		aMessageTopic_1 = "/robot/uwb_localization_1"; #2 left, 1 right
		serial_no_left = "3596376A3236";
		serial_no_right = "3983359D3336";
		dualFlag = false;
		# indoor environments
		anchorsId = [0x6059, 0x6040, 0x6056, 0X6833, 0x680A];
		anchorPosX = [224.7, 141.8, 219.2, 174.3, 66.5]; # in cm
		anchorPosY = [189.8, 171.6, 284.0, 400.2, 334.5];
		anchorPosZ = [206.7, 198.4, 199.3, 155.6, 151.0];
		height = 1.52;
	}
	visualize:
	{
		global_traj = "global_traj";
		dwa_traj = "dwa_traj"
		uwb_points = "uwb_nodes";
		robot_state = "robot_marker";
		ref_goal = "goal_marker";
		obstacles = "obstacles";
	}
	tf:
	{
		map = "map";
		oMap = "oMap";
		robot = "base_link";
		odom = "odom";
		uwb = "uwb_joint";
		transform_publish_period = 0.05; #second
	}

	dwa_motion:
	{
		deltaT = 0.1;
		reachDist = 2.5;
		obstacleR = 1.5;
		minDWAControlDist = 3;
	}
	
	fTimeStep = 0.1; # in s, time step used for data fusion
	sRobotPara:
	{
		oneMeterPixels = 100.0; #1 meter = 100 pixels
		fWheelDistance = 0.63; # in metre
		lidar_offsety = 0.0; # in meter
		lidar_offsetx = 0.22; # in meter
		uwb_offsety = 0; # in meter
		uwb_offsetx = -0.74; # in meter
		robotRadius = 0.5; # in meter
		stop_side = 0.7;
		stop_front = 0.6;
		fixConstrain = 1.06;
	}
	#rplidar parameters
	rplidar:
	{
		aMessageTopic = "/robot/rplidarNode";
		serial_port = "/dev/ttyUSB0";
		serial_baudrate = 115200;
		frame_id = "laser_frame";
		inverted = false;
		angle_compensate = true;
	}
	sPIDControl:
	{
		kp = 1.5;
		ki = 1.0;
		kd = 0.0;
		wheel_vel_left = 1.0;
		wheel_vel_right = 1.0;
	}
	dataRecord:
	{
		isRecord = true;
		envName = "workshop/drawing"
		recordIdx = "4"; 
		# recordIdx = "garden_manual_7";
		drawPath = false;
	}
	occMap:
	{
		aMessageTopic = "/map";
		mapSize = 90; #in meter
		occupied = 0.7; #threshold for occupied region
		free = 0.4; #threshold for free region
		mapOffset = 5; # #in meter # garden
		resol = 0.05; #resolution of the map, default is 0.05m
	}
	gazebo:
	{
		simulation = true;
	}

	exploration:
	{
		stateMessage = "/robot/explore_state";
		trajMessage = "/robot/trajectory";
		manually = false;
		nodesIDs = [10, 6, 1, 3, 9, 4, 8]; # garden
		# nodesIDs = [10, 6, 1, 4, 8, 9]; # workshop
		exploredThreshold = 0.1;
		env = 2; # 1 for garden, 2 for workshop
		waittime = 70; # wait for N loop before start the programe
		# mapSize = 30; # in meter # workshop
		# mapOffset = 10; # in meter # workshop
		nodeCnt = 8; # workshop 7, garden 8, building_big 9
		angularOffset = 0; #11 or 8 or 5 for workshop,
		minMoveDist = 0; #in meter
		minEntropy = 0.05;
	}
	# pfParam: # workshop
	# {
	# 	initDist = 1; # in m, use for determine the coordinate direction of the UWB nodes, these two nodes are prori known as being put infront of the robot.
	# 	pfCnt = 200; # the number of the particles
    #     odometry_std = [0.00001, 0.000001]; # the nosie added on odometry, in m
    #     robotConfig = [0.65, 0.25]; # 0: offset at x axis, 1: offset at y axis,  in m
    #     resol = 5.0; #resolution of the map, default is 5 cm
    #     fWheelDistance = 0.63; # the distance between two wheels. in m
    #     deltaT = 0.1; # the update time period, in s
    #     distUWBOnRobot = 1.06; # the distance between two UWB nodes installed on the robot, in m
    #     iterStopCond = 0.5; # the threshold to determine the end of scan matching. this is a average value, so it should be a very small one
    #     # refineVar = [0.02, 0.02, 0.04];# the basic variance for each particle on the step of position refine. var[:, 0] theta, var[:, 1] vel  # x, y, theta, vel
	# 	refineVar = [0.015, 0.015, 0.025];# the basic variance for each particle on the step of position refine. var[:, 0] theta, var[:, 1] vel  # x, y, theta, vel
	# 	maxIter = 15;
	# 	seeds = 123456789;
	# 	threshold = 0.2;
	# 	overlapThres = 0.3;
	# 	initHeadingStd = 0.1;
	# 	pRefineCnt = 100;
	# 	visualizeParticle = false;
	# 	lossThres = 0.1;
	# 	pValue = 0.05;
	# 	iterStepPvalue = 0.01;
	# 	maxIterPvalue = 50;
	# 	alpha = [0.3, 0.3, 0.05, 0.05, 0.5, 0.5];
	# }

	pfParam: # garden
	{
		aMessageTopic = "/robot/stateUpdate";
		pfCnt = 400; # the number of the particles
        fWheelDistance = 0.63; # the distance between two wheels. in m
        deltaT = 0.1; # the update time period, in s
        # refineVar = [0.02, 0.02, 0.04];# the basic variance for each particle on the step of position refine. var[:, 0] theta, var[:, 1] vel  # x, y, theta, vel
		refineVar = [0.15, 0.15, 0.1];# the basic variance for each particle on the step of position refine. var[:, 0] theta, var[:, 1] vel  # x, y, theta, vel
		maxIter = 50;
		seeds = 123456789;
		pRefineCnt = 800;
		pRefineMaxCnt = 2000;
		pRefineMinCnt = 100;
		#alpha = [0.3, 0.3, 0.05, 0.05, 0.5, 0.5];
		alpha = [0.9, 0.3, 0.3, 0.8, 0.2, 0.6];
		visualizeParticle = false;
		distUWBOnRobot = 1.02; # the distance between two UWB nodes installed on the robot, in m
		maxBeam = 100; # the maximum beams which will be used to compute the weight for each particle
		laser_z_hit = 0.95;
		laser_likelihood_max_dist = 2.0;
		range_max = 30.0;
		laser_z_rand = 0.05;
		laser_sigma_hit = 0.2;
		optimal_loss = 0.25;
		stop_loss = 0.5; # estimated from ((laser_z_rand * np.exp(-(z**2)/(2.0 * laser_sigma_hit**2)) + laser_z_rand / range_max) ** 3)
		optimal_stop_loss = 0.75;
		checkTimes = 10;
		maxRefineStd = [5.0, 5.0, 0.5];
        minRefineStd = [0.05, 0.05, 0.05];
	}
	uwb_range_measure:
	{
		simulateMessageTopic = "/uwb/UWB_data";
		realMessageTopic = "/robot/uwbRangeMeasure";
		# fixNodes = [7, 8]; # left right, right node is the ap one
		# axisNodes = [0, 1]; # (0,0), (x, 0)


		# building_big
		# fixNodes = [7, 8]; # left right, right node is the ap one
		# axisNodes = [3, 4]; # (0,0), (x, 0)

		# corridor
		fixNodes = [6, 7]; # left right, right node is the ap one
		axisNodes = [0, 1]; # (0,0), (x, 0)

		#fixNodes = [2, 7]; #left right
		#axis = [3, 6];
	}
};
### eof
